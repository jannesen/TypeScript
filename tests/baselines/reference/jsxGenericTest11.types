=== tests/cases/conformance/jsxGeneric/file.tsx ===
/* @jsx-mode generic */
/* @jsx-intrinsic-factory createElement */

interface HTMLAttributes {
    class?:     string;
>class : string

    id?:        string;
>id : string

    onclick?:   (this: HTMLElement, ev: MouseEvent) => void;
>onclick : (this: HTMLElement, ev: MouseEvent) => void
>this : HTMLElement
>ev : MouseEvent
}
 
export interface IContainer {
    readonly container: HTMLElement;
>container : HTMLElement
}
export interface AddArray extends Array<AddNode> {}
export type AddNode    = HTMLElement|string|IContainer|AddArray|false;
>AddNode : AddNode
>false : false

function createElement(tagName:"div"|"span", attrs?: HTMLAttributes, ...children:AddNode[]): HTMLElement {
>createElement : (tagName: "div" | "span", attrs?: HTMLAttributes, ...children: AddNode[]) => HTMLElement
>tagName : "div" | "span"
>attrs : HTMLAttributes
>children : AddNode[]

    return document.createElement(tagName);
>document.createElement(tagName) : HTMLDivElement | HTMLSpanElement
>document.createElement : { <K extends "object" | "div" | "span" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "link" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "small" | "source" | "strong" | "style" | "sub" | "summary" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr">(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K]; <K extends "listing" | "xmp">(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K]; (tagName: string, options?: ElementCreationOptions): HTMLElement; }
>document : Document
>createElement : { <K extends "object" | "div" | "span" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "link" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "progress" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "small" | "source" | "strong" | "style" | "sub" | "summary" | "sup" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr">(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K]; <K extends "listing" | "xmp">(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K]; (tagName: string, options?: ElementCreationOptions): HTMLElement; }
>tagName : "div" | "span"
}

function test() {
>test : () => HTMLElement

    return <div class="test">
><div class="test">                <Simple text="test"/>                <FunctionContainer>                    <span />                </FunctionContainer>                <ClassContainer>                    <span />                    { false }                </ClassContainer>                { false }           </div> : HTMLElement
>div : any
>class : string

                <Simple text="test"/>
><Simple text="test"/> : HTMLElement
>Simple : (attr: { text: string; }) => HTMLElement
>text : string

                <FunctionContainer>
><FunctionContainer>                    <span />                </FunctionContainer> : HTMLElement
>FunctionContainer : (attr: {}, ...children: AddNode[]) => HTMLElement

                    <span />
><span /> : HTMLElement
>span : any

                </FunctionContainer>
>FunctionContainer : (attr: {}, ...children: AddNode[]) => HTMLElement

                <ClassContainer>
><ClassContainer>                    <span />                    { false }                </ClassContainer> : ClassContainer
>ClassContainer : typeof ClassContainer

                    <span />
><span /> : HTMLElement
>span : any

                    { false }
>false : false

                </ClassContainer>
>ClassContainer : typeof ClassContainer

                { false }
>false : false

           </div>;
>div : any
}

function Simple(attr: { text:string }) {
>Simple : (attr: { text: string; }) => HTMLElement
>attr : { text: string; }
>text : string

    return <span>{ attr.text }</span>;
><span>{ attr.text }</span> : HTMLElement
>span : any
>attr.text : string
>attr : { text: string; }
>text : string
>span : any
}

function FunctionContainer(attr: { }, ...children:AddNode[]) {
>FunctionContainer : (attr: {}, ...children: AddNode[]) => HTMLElement
>attr : {}
>children : AddNode[]

    return <div>{ children }</div>;
><div>{ children }</div> : HTMLElement
>div : any
>children : AddNode[]
>div : any
}

class ClassContainer implements IContainer {
>ClassContainer : ClassContainer

    public container:HTMLElement;
>container : HTMLElement

    constructor(attrs?: {}, ...children:AddNode[]) {
>attrs : {}
>children : AddNode[]

        this.container = <div>{ children }</div>;
>this.container = <div>{ children }</div> : HTMLElement
>this.container : HTMLElement
>this : this
>container : HTMLElement
><div>{ children }</div> : HTMLElement
>div : any
>children : AddNode[]
>div : any
	}
}

